(translation_unit [0, 0] - [97, 1]
  (preproc_include [0, 0] - [1, 0]
    path: (string_literal [0, 9] - [0, 25]))
  (preproc_include [1, 0] - [2, 0]
    path: (system_lib_string [1, 9] - [1, 16]))
  (function_definition [3, 0] - [10, 1]
    declarator: (function_declarator [3, 0] - [3, 28]
      declarator: (qualified_identifier [3, 0] - [3, 26]
        scope: (namespace_identifier [3, 0] - [3, 12])
        name: (identifier [3, 14] - [3, 26]))
      parameters: (parameter_list [3, 26] - [3, 28]))
    body: (compound_statement [4, 0] - [10, 1]
      (expression_statement [5, 1] - [5, 12]
        (assignment_expression [5, 1] - [5, 11]
          left: (identifier [5, 1] - [5, 7])
          right: (number_literal [5, 10] - [5, 11])))
      (expression_statement [6, 1] - [6, 19]
        (assignment_expression [6, 1] - [6, 18]
          left: (identifier [6, 1] - [6, 10])
          right: (false [6, 13] - [6, 18])))
      (expression_statement [7, 1] - [7, 25]
        (assignment_expression [7, 1] - [7, 24]
          left: (identifier [7, 1] - [7, 16])
          right: (false [7, 19] - [7, 24])))
      (expression_statement [8, 1] - [8, 12]
        (assignment_expression [8, 1] - [8, 11]
          left: (identifier [8, 1] - [8, 7])
          right: (number_literal [8, 10] - [8, 11])))
      (expression_statement [9, 1] - [9, 21]
        (call_expression [9, 1] - [9, 20]
          function: (identifier [9, 1] - [9, 18])
          arguments: (argument_list [9, 18] - [9, 20])))))
  (function_definition [12, 0] - [19, 1]
    declarator: (function_declarator [12, 0] - [12, 40]
      declarator: (qualified_identifier [12, 0] - [12, 26]
        scope: (namespace_identifier [12, 0] - [12, 12])
        name: (identifier [12, 14] - [12, 26]))
      parameters: (parameter_list [12, 26] - [12, 40]
        (parameter_declaration [12, 27] - [12, 39]
          type: (primitive_type [12, 27] - [12, 34])
          declarator: (identifier [12, 35] - [12, 39]))))
    body: (compound_statement [13, 0] - [19, 1]
      (expression_statement [14, 1] - [14, 12]
        (assignment_expression [14, 1] - [14, 11]
          left: (identifier [14, 1] - [14, 7])
          right: (number_literal [14, 10] - [14, 11])))
      (expression_statement [15, 1] - [15, 19]
        (assignment_expression [15, 1] - [15, 18]
          left: (identifier [15, 1] - [15, 10])
          right: (false [15, 13] - [15, 18])))
      (expression_statement [16, 1] - [16, 25]
        (assignment_expression [16, 1] - [16, 24]
          left: (identifier [16, 1] - [16, 16])
          right: (false [16, 19] - [16, 24])))
      (expression_statement [17, 1] - [17, 12]
        (assignment_expression [17, 1] - [17, 11]
          left: (identifier [17, 1] - [17, 7])
          right: (number_literal [17, 10] - [17, 11])))
      (expression_statement [18, 1] - [18, 25]
        (call_expression [18, 1] - [18, 24]
          function: (identifier [18, 1] - [18, 18])
          arguments: (argument_list [18, 18] - [18, 24]
            (identifier [18, 19] - [18, 23]))))))
  (function_definition [21, 0] - [24, 1]
    declarator: (function_declarator [21, 0] - [21, 29]
      declarator: (qualified_identifier [21, 0] - [21, 27]
        scope: (namespace_identifier [21, 0] - [21, 12])
        name: (destructor_name [21, 14] - [21, 27]
          (identifier [21, 15] - [21, 27])))
      parameters: (parameter_list [21, 27] - [21, 29]))
    body: (compound_statement [22, 0] - [24, 1]
      (expression_statement [23, 1] - [23, 20]
        (call_expression [23, 1] - [23, 19]
          function: (identifier [23, 1] - [23, 17])
          arguments: (argument_list [23, 17] - [23, 19])))))
  (function_definition [26, 0] - [65, 1]
    type: (primitive_type [26, 0] - [26, 4])
    declarator: (function_declarator [26, 5] - [26, 49]
      declarator: (qualified_identifier [26, 5] - [26, 36]
        scope: (namespace_identifier [26, 5] - [26, 17])
        name: (identifier [26, 19] - [26, 36]))
      parameters: (parameter_list [26, 36] - [26, 49]
        (parameter_declaration [26, 37] - [26, 48]
          type: (primitive_type [26, 37] - [26, 43])
          declarator: (identifier [26, 44] - [26, 48]))))
    body: (compound_statement [27, 0] - [65, 1]
      (declaration [28, 1] - [28, 55]
        type: (primitive_type [28, 1] - [28, 7])
        declarator: (init_declarator [28, 8] - [28, 54]
          declarator: (identifier [28, 8] - [28, 16])
          value: (call_expression [28, 19] - [28, 54]
            function: (qualified_identifier [28, 19] - [28, 52]
              scope: (namespace_identifier [28, 19] - [28, 22])
              name: (qualified_identifier [28, 24] - [28, 52]
                scope: (namespace_identifier [28, 24] - [28, 30])
                name: (identifier [28, 32] - [28, 52])))
            arguments: (argument_list [28, 52] - [28, 54]))))
      (if_statement [30, 1] - [31, 9]
        condition: (condition_clause [30, 4] - [30, 21]
          value: (binary_expression [30, 5] - [30, 20]
            left: (identifier [30, 5] - [30, 13])
            right: (identifier [30, 16] - [30, 20])))
        consequence: (return_statement [31, 2] - [31, 9]))
      (expression_statement [33, 1] - [33, 18]
        (assignment_expression [33, 1] - [33, 17]
          left: (identifier [33, 1] - [33, 10])
          right: (true [33, 13] - [33, 17])))
      (expression_statement [34, 1] - [34, 15]
        (assignment_expression [34, 1] - [34, 14]
          left: (identifier [34, 1] - [34, 7])
          right: (identifier [34, 10] - [34, 14])))
      (expression_statement [35, 1] - [64, 4]
        (assignment_expression [35, 1] - [64, 3]
          left: (identifier [35, 1] - [35, 15])
          right: (call_expression [35, 18] - [64, 3]
            function: (qualified_identifier [35, 18] - [35, 29]
              scope: (namespace_identifier [35, 18] - [35, 21])
              name: (identifier [35, 23] - [35, 29]))
            arguments: (argument_list [35, 29] - [64, 3]
              (lambda_expression [35, 30] - [64, 2]
                captures: (lambda_capture_specifier [35, 30] - [35, 42]
                  (this [35, 31] - [35, 35])
                  (identifier [35, 37] - [35, 41]))
                body: (compound_statement [35, 43] - [64, 2]
                  (preproc_ifdef [37, 0] - [42, 6]
                    name: (identifier [37, 7] - [37, 15])
                    (if_statement [38, 2] - [41, 3]
                      condition: (condition_clause [38, 5] - [38, 16]
                        value: (binary_expression [38, 6] - [38, 15]
                          left: (identifier [38, 6] - [38, 10])
                          right: (number_literal [38, 14] - [38, 15])))
                      consequence: (compound_statement [38, 17] - [41, 3]
                        (expression_statement [39, 3] - [39, 53]
                          (call_expression [39, 3] - [39, 52]
                            function: (identifier [39, 3] - [39, 26])
                            arguments: (argument_list [39, 26] - [39, 52]
                              (call_expression [39, 27] - [39, 45]
                                function: (identifier [39, 27] - [39, 43])
                                arguments: (argument_list [39, 43] - [39, 45]))
                              (identifier [39, 47] - [39, 51]))))
                        (declaration [40, 3] - [40, 93]
                          type: (type_identifier [40, 3] - [40, 12])
                          declarator: (init_declarator [40, 13] - [40, 92]
                            declarator: (identifier [40, 13] - [40, 15])
                            value: (call_expression [40, 18] - [40, 92]
                              function: (identifier [40, 18] - [40, 39])
                              arguments: (argument_list [40, 39] - [40, 92]
                                (call_expression [40, 40] - [40, 58]
                                  function: (identifier [40, 40] - [40, 56])
                                  arguments: (argument_list [40, 56] - [40, 58]))
                                (binary_expression [40, 60] - [40, 91]
                                  left: (call_expression [40, 60] - [40, 72]
                                    function: (identifier [40, 60] - [40, 69])
                                    arguments: (argument_list [40, 69] - [40, 72]
                                      (number_literal [40, 70] - [40, 71])))
                                  right: (parenthesized_expression [40, 76] - [40, 91]
                                    (cast_expression [40, 77] - [40, 90]
                                      type: (type_descriptor [40, 78] - [40, 85]
                                        type: (primitive_type [40, 78] - [40, 85]))
                                      value: (identifier [40, 86] - [40, 90])))))))))))
                  (preproc_ifdef [44, 0] - [46, 6]
                    name: (identifier [44, 8] - [44, 16])
                    (declaration [45, 2] - [45, 66]
                      type: (qualified_identifier [45, 2] - [45, 30]
                        scope: (namespace_identifier [45, 2] - [45, 5])
                        name: (template_type [45, 7] - [45, 30]
                          name: (type_identifier [45, 7] - [45, 18])
                          arguments: (template_argument_list [45, 18] - [45, 30]
                            (type_descriptor [45, 19] - [45, 29]
                              type: (qualified_identifier [45, 19] - [45, 29]
                                scope: (namespace_identifier [45, 19] - [45, 22])
                                name: (type_identifier [45, 24] - [45, 29]))))))
                      declarator: (function_declarator [45, 31] - [45, 65]
                        declarator: (identifier [45, 31] - [45, 35])
                        parameters: (parameter_list [45, 35] - [45, 65]
                          (parameter_declaration [45, 36] - [45, 47]
                            type: (type_identifier [45, 36] - [45, 47]))
                          (parameter_declaration [45, 49] - [45, 64]
                            type: (qualified_identifier [45, 49] - [45, 64]
                              scope: (namespace_identifier [45, 49] - [45, 52])
                              name: (type_identifier [45, 54] - [45, 64])))))))
                  (do_statement [47, 2] - [63, 22]
                    body: (compound_statement [48, 2] - [63, 3]
                      (preproc_ifdef [50, 0] - [54, 6]
                        name: (identifier [50, 8] - [50, 16])
                        (expression_statement [51, 3] - [51, 15]
                          (call_expression [51, 3] - [51, 14]
                            function: (field_expression [51, 3] - [51, 12]
                              argument: (identifier [51, 3] - [51, 7])
                              field: (field_identifier [51, 8] - [51, 12]))
                            arguments: (argument_list [51, 12] - [51, 14])))
                        (comment [52, 3] - [52, 68])
                        (expression_statement [53, 3] - [53, 83]
                          (call_expression [53, 3] - [53, 82]
                            function: (field_expression [53, 3] - [53, 27]
                              argument: (identifier [53, 3] - [53, 22])
                              field: (field_identifier [53, 23] - [53, 27]))
                            arguments: (argument_list [53, 27] - [53, 82]
                              (identifier [53, 28] - [53, 32])
                              (lambda_expression [53, 34] - [53, 81]
                                captures: (lambda_capture_specifier [53, 34] - [53, 40]
                                  (this [53, 35] - [53, 39]))
                                body: (compound_statement [53, 40] - [53, 81]
                                  (return_statement [53, 42] - [53, 79]
                                    (binary_expression [53, 49] - [53, 78]
                                      left: (identifier [53, 49] - [53, 64])
                                      right: (unary_expression [53, 68] - [53, 78]
                                        argument: (identifier [53, 69] - [53, 78]))))))))))
                      (if_statement [55, 3] - [59, 4]
                        condition: (condition_clause [55, 6] - [55, 14]
                          value: (identifier [55, 7] - [55, 13]))
                        consequence: (compound_statement [55, 15] - [59, 4]
                          (expression_statement [56, 4] - [56, 13]
                            (call_expression [56, 4] - [56, 12]
                              function: (identifier [56, 4] - [56, 10])
                              arguments: (argument_list [56, 10] - [56, 12])))
                          (expression_statement [57, 4] - [57, 15]
                            (assignment_expression [57, 4] - [57, 14]
                              left: (identifier [57, 4] - [57, 10])
                              right: (number_literal [57, 13] - [57, 14])))
                          (expression_statement [58, 4] - [58, 28]
                            (assignment_expression [58, 4] - [58, 27]
                              left: (identifier [58, 4] - [58, 19])
                              right: (false [58, 22] - [58, 27])))))
                      (preproc_ifdef [60, 0] - [62, 6]
                        name: (identifier [60, 8] - [60, 16])
                        (expression_statement [61, 3] - [61, 17]
                          (call_expression [61, 3] - [61, 16]
                            function: (field_expression [61, 3] - [61, 14]
                              argument: (identifier [61, 3] - [61, 7])
                              field: (field_identifier [61, 8] - [61, 14]))
                            arguments: (argument_list [61, 14] - [61, 16])))))
                    condition: (parenthesized_expression [63, 10] - [63, 21]
                      (identifier [63, 11] - [63, 20])))))))))))
  (function_definition [67, 0] - [77, 1]
    type: (primitive_type [67, 0] - [67, 4])
    declarator: (function_declarator [67, 5] - [67, 37]
      declarator: (qualified_identifier [67, 5] - [67, 35]
        scope: (namespace_identifier [67, 5] - [67, 17])
        name: (identifier [67, 19] - [67, 35]))
      parameters: (parameter_list [67, 35] - [67, 37]))
    body: (compound_statement [68, 0] - [77, 1]
      (if_statement [69, 1] - [76, 2]
        condition: (condition_clause [69, 4] - [69, 15]
          value: (identifier [69, 5] - [69, 14]))
        consequence: (compound_statement [70, 1] - [76, 2]
          (expression_statement [71, 2] - [71, 20]
            (assignment_expression [71, 2] - [71, 19]
              left: (identifier [71, 2] - [71, 11])
              right: (false [71, 14] - [71, 19])))
          (expression_statement [72, 2] - [72, 35]
            (call_expression [72, 2] - [72, 34]
              function: (field_expression [72, 2] - [72, 32]
                argument: (identifier [72, 2] - [72, 21])
                field: (field_identifier [72, 22] - [72, 32]))
              arguments: (argument_list [72, 32] - [72, 34])))
          (if_statement [73, 2] - [75, 3]
            condition: (condition_clause [73, 5] - [73, 32]
              value: (call_expression [73, 6] - [73, 31]
                function: (field_expression [73, 6] - [73, 29]
                  argument: (identifier [73, 6] - [73, 20])
                  field: (field_identifier [73, 21] - [73, 29]))
                arguments: (argument_list [73, 29] - [73, 31])))
            consequence: (compound_statement [73, 33] - [75, 3]
              (expression_statement [74, 3] - [74, 25]
                (call_expression [74, 3] - [74, 24]
                  function: (field_expression [74, 3] - [74, 22]
                    argument: (identifier [74, 3] - [74, 17])
                    field: (field_identifier [74, 18] - [74, 22]))
                  arguments: (argument_list [74, 22] - [74, 24])))))))))
  (function_definition [79, 0] - [87, 1]
    type: (primitive_type [79, 0] - [79, 4])
    declarator: (function_declarator [79, 5] - [79, 50]
      declarator: (qualified_identifier [79, 5] - [79, 22]
        scope: (namespace_identifier [79, 5] - [79, 17])
        name: (identifier [79, 19] - [79, 22]))
      parameters: (parameter_list [79, 22] - [79, 50]
        (parameter_declaration [79, 23] - [79, 49]
          type: (qualified_identifier [79, 23] - [79, 44]
            scope: (namespace_identifier [79, 23] - [79, 26])
            name: (template_type [79, 28] - [79, 44]
              name: (type_identifier [79, 28] - [79, 36])
              arguments: (template_argument_list [79, 36] - [79, 44]
                (type_descriptor [79, 37] - [79, 43]
                  type: (primitive_type [79, 37] - [79, 41])
                  declarator: (abstract_function_declarator [79, 41] - [79, 43]
                    parameters: (parameter_list [79, 41] - [79, 43]))))))
          declarator: (identifier [79, 45] - [79, 49]))))
    body: (compound_statement [80, 0] - [87, 1]
      (compound_statement [81, 1] - [85, 2]
        (declaration [82, 2] - [82, 49]
          type: (qualified_identifier [82, 2] - [82, 29]
            scope: (namespace_identifier [82, 2] - [82, 5])
            name: (template_type [82, 7] - [82, 29]
              name: (type_identifier [82, 7] - [82, 17])
              arguments: (template_argument_list [82, 17] - [82, 29]
                (type_descriptor [82, 18] - [82, 28]
                  type: (qualified_identifier [82, 18] - [82, 28]
                    scope: (namespace_identifier [82, 18] - [82, 21])
                    name: (type_identifier [82, 23] - [82, 28]))))))
          declarator: (function_declarator [82, 30] - [82, 48]
            declarator: (identifier [82, 30] - [82, 35])
            parameters: (parameter_list [82, 35] - [82, 48]
              (parameter_declaration [82, 36] - [82, 47]
                type: (type_identifier [82, 36] - [82, 47])))))
        (expression_statement [83, 2] - [83, 25]
          (assignment_expression [83, 2] - [83, 24]
            left: (identifier [83, 2] - [83, 17])
            right: (true [83, 20] - [83, 24])))
        (expression_statement [84, 2] - [84, 16]
          (assignment_expression [84, 2] - [84, 15]
            left: (identifier [84, 2] - [84, 8])
            right: (identifier [84, 11] - [84, 15]))))
      (expression_statement [86, 1] - [86, 34]
        (call_expression [86, 1] - [86, 33]
          function: (field_expression [86, 1] - [86, 31]
            argument: (identifier [86, 1] - [86, 20])
            field: (field_identifier [86, 21] - [86, 31]))
          arguments: (argument_list [86, 31] - [86, 33])))))
  (function_definition [89, 0] - [92, 1]
    type: (primitive_type [89, 0] - [89, 4])
    declarator: (function_declarator [89, 5] - [89, 30]
      declarator: (qualified_identifier [89, 5] - [89, 28]
        scope: (namespace_identifier [89, 5] - [89, 17])
        name: (identifier [89, 19] - [89, 28]))
      parameters: (parameter_list [89, 28] - [89, 30]))
    body: (compound_statement [90, 0] - [92, 1]
      (return_statement [91, 1] - [91, 18]
        (identifier [91, 8] - [91, 17]))))
  (function_definition [94, 0] - [97, 1]
    type: (primitive_type [94, 0] - [94, 4])
    declarator: (function_declarator [94, 5] - [94, 37]
      declarator: (qualified_identifier [94, 5] - [94, 35]
        scope: (namespace_identifier [94, 5] - [94, 17])
        name: (identifier [94, 19] - [94, 35]))
      parameters: (parameter_list [94, 35] - [94, 37]))
    body: (compound_statement [95, 0] - [97, 1]
      (return_statement [96, 1] - [96, 24]
        (identifier [96, 8] - [96, 23])))))
