(translation_unit [0, 0] - [172, 0]
  (preproc_include [0, 0] - [1, 0]
    path: (string_literal [0, 9] - [0, 21]))
  (preproc_include [1, 0] - [2, 0]
    path: (string_literal [1, 9] - [1, 17]))
  (comment [3, 0] - [3, 45])
  (declaration [4, 0] - [4, 47]
    type: (type_identifier [4, 0] - [4, 8])
    declarator: (init_declarator [4, 9] - [4, 46]
      declarator: (identifier [4, 9] - [4, 17])
      value: (call_expression [4, 20] - [4, 46]
        function: (identifier [4, 20] - [4, 28])
        arguments: (argument_list [4, 28] - [4, 46]
          (number_literal [4, 29] - [4, 30])
          (number_literal [4, 32] - [4, 33])
          (number_literal [4, 35] - [4, 36])
          (number_literal [4, 38] - [4, 39])
          (number_literal [4, 41] - [4, 42])
          (number_literal [4, 44] - [4, 45])))))
  (comment [5, 0] - [5, 63])
  (comment [6, 0] - [6, 64])
  (comment [7, 0] - [7, 93])
  (comment [8, 0] - [8, 90])
  (function_definition [10, 0] - [18, 1]
    declarator: (function_declarator [10, 0] - [10, 20]
      declarator: (qualified_identifier [10, 0] - [10, 18]
        scope: (namespace_identifier [10, 0] - [10, 8])
        name: (identifier [10, 10] - [10, 18]))
      parameters: (parameter_list [10, 18] - [10, 20]))
    body: (compound_statement [11, 0] - [18, 1]
      (expression_statement [12, 1] - [12, 16]
        (assignment_expression [12, 1] - [12, 15]
          left: (identifier [12, 1] - [12, 11])
          right: (number_literal [12, 14] - [12, 15])))
      (expression_statement [13, 1] - [13, 16]
        (assignment_expression [13, 1] - [13, 15]
          left: (identifier [13, 1] - [13, 11])
          right: (number_literal [13, 14] - [13, 15])))
      (expression_statement [14, 1] - [14, 17]
        (assignment_expression [14, 1] - [14, 16]
          left: (identifier [14, 1] - [14, 12])
          right: (number_literal [14, 15] - [14, 16])))
      (expression_statement [15, 1] - [15, 18]
        (assignment_expression [15, 1] - [15, 17]
          left: (identifier [15, 1] - [15, 13])
          right: (number_literal [15, 16] - [15, 17])))
      (expression_statement [16, 1] - [16, 20]
        (assignment_expression [16, 1] - [16, 19]
          left: (identifier [16, 1] - [16, 15])
          right: (number_literal [16, 18] - [16, 19])))
      (expression_statement [17, 1] - [17, 21]
        (assignment_expression [17, 1] - [17, 20]
          left: (identifier [17, 1] - [17, 16])
          right: (number_literal [17, 19] - [17, 20])))))
  (expression_statement [18, 1] - [18, 2])
  (function_definition [20, 0] - [29, 1]
    declarator: (function_declarator [20, 0] - [20, 37]
      declarator: (qualified_identifier [20, 0] - [20, 18]
        scope: (namespace_identifier [20, 0] - [20, 8])
        name: (identifier [20, 10] - [20, 18]))
      parameters: (parameter_list [20, 18] - [20, 37]
        (parameter_declaration [20, 19] - [20, 36]
          (type_qualifier [20, 19] - [20, 24])
          type: (type_identifier [20, 25] - [20, 33])
          declarator: (reference_declarator [20, 33] - [20, 36]
            (identifier [20, 35] - [20, 36])))))
    body: (compound_statement [21, 0] - [29, 1]
      (expression_statement [22, 1] - [22, 27]
        (assignment_expression [22, 1] - [22, 26]
          left: (identifier [22, 1] - [22, 11])
          right: (field_expression [22, 14] - [22, 26]
            argument: (identifier [22, 14] - [22, 15])
            field: (field_identifier [22, 16] - [22, 26]))))
      (expression_statement [23, 1] - [23, 27]
        (assignment_expression [23, 1] - [23, 26]
          left: (identifier [23, 1] - [23, 11])
          right: (field_expression [23, 14] - [23, 26]
            argument: (identifier [23, 14] - [23, 15])
            field: (field_identifier [23, 16] - [23, 26]))))
      (expression_statement [24, 1] - [24, 29]
        (assignment_expression [24, 1] - [24, 28]
          left: (identifier [24, 1] - [24, 12])
          right: (field_expression [24, 15] - [24, 28]
            argument: (identifier [24, 15] - [24, 16])
            field: (field_identifier [24, 17] - [24, 28]))))
      (expression_statement [25, 1] - [25, 31]
        (assignment_expression [25, 1] - [25, 30]
          left: (identifier [25, 1] - [25, 13])
          right: (field_expression [25, 16] - [25, 30]
            argument: (identifier [25, 16] - [25, 17])
            field: (field_identifier [25, 18] - [25, 30]))))
      (expression_statement [27, 1] - [27, 35]
        (assignment_expression [27, 1] - [27, 34]
          left: (identifier [27, 1] - [27, 15])
          right: (field_expression [27, 18] - [27, 34]
            argument: (identifier [27, 18] - [27, 19])
            field: (field_identifier [27, 20] - [27, 34]))))
      (expression_statement [28, 1] - [28, 37]
        (assignment_expression [28, 1] - [28, 36]
          left: (identifier [28, 1] - [28, 16])
          right: (field_expression [28, 19] - [28, 36]
            argument: (identifier [28, 19] - [28, 20])
            field: (field_identifier [28, 21] - [28, 36]))))))
  (expression_statement [29, 1] - [29, 2])
  (function_definition [31, 0] - [37, 1]
    declarator: (function_declarator [31, 0] - [31, 113]
      declarator: (qualified_identifier [31, 0] - [31, 18]
        scope: (namespace_identifier [31, 0] - [31, 8])
        name: (identifier [31, 10] - [31, 18]))
      parameters: (parameter_list [31, 18] - [31, 113]
        (parameter_declaration [31, 19] - [31, 40]
          type: (primitive_type [31, 19] - [31, 27])
          declarator: (identifier [31, 28] - [31, 40]))
        (parameter_declaration [31, 42] - [31, 63]
          type: (primitive_type [31, 42] - [31, 50])
          declarator: (identifier [31, 51] - [31, 63]))
        (parameter_declaration [31, 65] - [31, 87]
          type: (primitive_type [31, 65] - [31, 73])
          declarator: (identifier [31, 74] - [31, 87]))
        (parameter_declaration [31, 89] - [31, 112]
          type: (primitive_type [31, 89] - [31, 97])
          declarator: (identifier [31, 98] - [31, 112]))))
    body: (compound_statement [32, 0] - [37, 1]
      (expression_statement [33, 1] - [33, 27]
        (assignment_expression [33, 1] - [33, 26]
          left: (identifier [33, 1] - [33, 11])
          right: (identifier [33, 14] - [33, 26])))
      (expression_statement [34, 1] - [34, 27]
        (assignment_expression [34, 1] - [34, 26]
          left: (identifier [34, 1] - [34, 11])
          right: (identifier [34, 14] - [34, 26])))
      (expression_statement [35, 1] - [35, 29]
        (assignment_expression [35, 1] - [35, 28]
          left: (identifier [35, 1] - [35, 12])
          right: (identifier [35, 15] - [35, 28])))
      (expression_statement [36, 1] - [36, 31]
        (assignment_expression [36, 1] - [36, 30]
          left: (identifier [36, 1] - [36, 13])
          right: (identifier [36, 16] - [36, 30])))))
  (expression_statement [37, 1] - [37, 2])
  (function_definition [39, 0] - [48, 1]
    declarator: (function_declarator [39, 0] - [39, 168]
      declarator: (qualified_identifier [39, 0] - [39, 18]
        scope: (namespace_identifier [39, 0] - [39, 8])
        name: (identifier [39, 10] - [39, 18]))
      parameters: (parameter_list [39, 18] - [39, 168]
        (parameter_declaration [39, 19] - [39, 40]
          type: (primitive_type [39, 19] - [39, 27])
          declarator: (identifier [39, 28] - [39, 40]))
        (parameter_declaration [39, 42] - [39, 63]
          type: (primitive_type [39, 42] - [39, 50])
          declarator: (identifier [39, 51] - [39, 63]))
        (parameter_declaration [39, 65] - [39, 87]
          type: (primitive_type [39, 65] - [39, 73])
          declarator: (identifier [39, 74] - [39, 87]))
        (parameter_declaration [39, 89] - [39, 112]
          type: (primitive_type [39, 89] - [39, 97])
          declarator: (identifier [39, 98] - [39, 112]))
        (parameter_declaration [39, 114] - [39, 139]
          type: (primitive_type [39, 114] - [39, 122])
          declarator: (identifier [39, 123] - [39, 139]))
        (parameter_declaration [39, 141] - [39, 167]
          type: (primitive_type [39, 141] - [39, 149])
          declarator: (identifier [39, 150] - [39, 167]))))
    body: (compound_statement [40, 0] - [48, 1]
      (expression_statement [41, 1] - [41, 27]
        (assignment_expression [41, 1] - [41, 26]
          left: (identifier [41, 1] - [41, 11])
          right: (identifier [41, 14] - [41, 26])))
      (expression_statement [42, 1] - [42, 27]
        (assignment_expression [42, 1] - [42, 26]
          left: (identifier [42, 1] - [42, 11])
          right: (identifier [42, 14] - [42, 26])))
      (expression_statement [43, 1] - [43, 29]
        (assignment_expression [43, 1] - [43, 28]
          left: (identifier [43, 1] - [43, 12])
          right: (identifier [43, 15] - [43, 28])))
      (expression_statement [44, 1] - [44, 31]
        (assignment_expression [44, 1] - [44, 30]
          left: (identifier [44, 1] - [44, 13])
          right: (identifier [44, 16] - [44, 30])))
      (expression_statement [46, 1] - [46, 35]
        (assignment_expression [46, 1] - [46, 34]
          left: (identifier [46, 1] - [46, 15])
          right: (identifier [46, 18] - [46, 34])))
      (expression_statement [47, 1] - [47, 37]
        (assignment_expression [47, 1] - [47, 36]
          left: (identifier [47, 1] - [47, 16])
          right: (identifier [47, 19] - [47, 36])))))
  (expression_statement [48, 1] - [48, 2])
  (function_definition [50, 0] - [70, 1]
    type: (primitive_type [50, 0] - [50, 4])
    declarator: (function_declarator [50, 5] - [50, 104]
      declarator: (qualified_identifier [50, 5] - [50, 42]
        scope: (namespace_identifier [50, 5] - [50, 13])
        name: (identifier [50, 15] - [50, 42]))
      parameters: (parameter_list [50, 42] - [50, 104]
        (parameter_declaration [50, 43] - [50, 52]
          type: (primitive_type [50, 43] - [50, 46])
          declarator: (identifier [50, 47] - [50, 52]))
        (parameter_declaration [50, 54] - [50, 64]
          type: (primitive_type [50, 54] - [50, 57])
          declarator: (identifier [50, 58] - [50, 64]))
        (parameter_declaration [50, 66] - [50, 83]
          type: (primitive_type [50, 66] - [50, 69])
          declarator: (identifier [50, 70] - [50, 83]))
        (parameter_declaration [50, 85] - [50, 103]
          type: (primitive_type [50, 85] - [50, 88])
          declarator: (identifier [50, 89] - [50, 103]))))
    (comment [50, 104] - [50, 113])
    body: (compound_statement [51, 0] - [70, 1]
      (declaration [52, 1] - [52, 16]
        type: (primitive_type [52, 1] - [52, 4])
        declarator: (identifier [52, 5] - [52, 15]))
      (declaration [53, 1] - [53, 17]
        type: (primitive_type [53, 1] - [53, 4])
        declarator: (identifier [53, 5] - [53, 16]))
      (declaration [54, 1] - [54, 24]
        type: (primitive_type [54, 1] - [54, 4])
        declarator: (identifier [54, 5] - [54, 23]))
      (declaration [55, 1] - [55, 25]
        type: (primitive_type [55, 1] - [55, 4])
        declarator: (identifier [55, 5] - [55, 24]))
      (expression_statement [57, 1] - [57, 20]
        (assignment_expression [57, 1] - [57, 19]
          left: (identifier [57, 1] - [57, 11])
          right: (identifier [57, 14] - [57, 19])))
      (expression_statement [58, 1] - [58, 22]
        (assignment_expression [58, 1] - [58, 21]
          left: (identifier [58, 1] - [58, 12])
          right: (identifier [58, 15] - [58, 21])))
      (expression_statement [59, 1] - [59, 36]
        (assignment_expression [59, 1] - [59, 35]
          left: (identifier [59, 1] - [59, 19])
          right: (identifier [59, 22] - [59, 35])))
      (expression_statement [60, 1] - [60, 38]
        (assignment_expression [60, 1] - [60, 37]
          left: (identifier [60, 1] - [60, 20])
          right: (identifier [60, 23] - [60, 37])))
      (if_statement [61, 1] - [67, 2]
        condition: (condition_clause [61, 4] - [61, 43]
          value: (binary_expression [61, 5] - [61, 42]
            left: (identifier [61, 5] - [61, 38])
            right: (number_literal [61, 41] - [61, 42])))
        consequence: (compound_statement [62, 1] - [67, 2]
          (expression_statement [63, 2] - [63, 26]
            (assignment_expression [63, 2] - [63, 25]
              left: (identifier [63, 2] - [63, 12])
              right: (binary_expression [63, 15] - [63, 25]
                left: (identifier [63, 15] - [63, 20])
                right: (number_literal [63, 24] - [63, 25]))))
          (expression_statement [64, 2] - [64, 28]
            (assignment_expression [64, 2] - [64, 27]
              left: (identifier [64, 2] - [64, 13])
              right: (binary_expression [64, 16] - [64, 27]
                left: (identifier [64, 16] - [64, 22])
                right: (number_literal [64, 26] - [64, 27]))))
          (expression_statement [65, 2] - [65, 42]
            (assignment_expression [65, 2] - [65, 41]
              left: (identifier [65, 2] - [65, 20])
              right: (binary_expression [65, 23] - [65, 41]
                left: (identifier [65, 23] - [65, 36])
                right: (number_literal [65, 40] - [65, 41]))))
          (expression_statement [66, 2] - [66, 44]
            (assignment_expression [66, 2] - [66, 43]
              left: (identifier [66, 2] - [66, 21])
              right: (binary_expression [66, 24] - [66, 43]
                left: (identifier [66, 24] - [66, 38])
                right: (number_literal [66, 42] - [66, 43]))))))
      (expression_statement [68, 1] - [68, 98]
        (assignment_expression [68, 1] - [68, 97]
          left: (field_expression [68, 1] - [68, 49]
            argument: (identifier [68, 1] - [68, 12])
            field: (field_identifier [68, 13] - [68, 49]))
          right: (binary_expression [68, 52] - [68, 97]
            left: (identifier [68, 52] - [68, 62])
            right: (binary_expression [68, 65] - [68, 97]
              left: (identifier [68, 65] - [68, 83])
              right: (identifier [68, 86] - [68, 97])))))
      (expression_statement [69, 1] - [69, 165]
        (call_expression [69, 1] - [69, 164]
          function: (identifier [69, 1] - [69, 28])
          arguments: (argument_list [69, 28] - [69, 164]
            (binary_expression [69, 29] - [69, 102]
              left: (field_expression [69, 29] - [69, 77]
                argument: (identifier [69, 29] - [69, 40])
                field: (field_identifier [69, 41] - [69, 77]))
              right: (identifier [69, 80] - [69, 102]))
            (identifier [69, 104] - [69, 122])
            (identifier [69, 124] - [69, 142])
            (identifier [69, 144] - [69, 163]))))))
  (function_definition [72, 0] - [78, 1]
    type: (primitive_type [72, 0] - [72, 4])
    declarator: (function_declarator [72, 5] - [72, 71]
      declarator: (qualified_identifier [72, 5] - [72, 42]
        scope: (namespace_identifier [72, 5] - [72, 13])
        name: (identifier [72, 15] - [72, 42]))
      parameters: (parameter_list [72, 42] - [72, 71]
        (parameter_declaration [72, 43] - [72, 70]
          type: (primitive_type [72, 43] - [72, 50])
          declarator: (identifier [72, 51] - [72, 70]))))
    (comment [72, 71] - [72, 80])
    body: (compound_statement [73, 0] - [78, 1]
      (declaration [74, 1] - [74, 113]
        type: (type_identifier [74, 1] - [74, 10])
        declarator: (init_declarator [74, 11] - [74, 112]
          declarator: (identifier [74, 11] - [74, 20])
          value: (call_expression [74, 23] - [74, 112]
            function: (identifier [74, 23] - [74, 50])
            arguments: (argument_list [74, 50] - [74, 112]
              (identifier [74, 51] - [74, 70])
              (identifier [74, 72] - [74, 90])
              (identifier [74, 92] - [74, 111])))))
      (declaration [75, 1] - [75, 82]
        type: (primitive_type [75, 1] - [75, 8])
        declarator: (init_declarator [75, 9] - [75, 81]
          declarator: (identifier [75, 9] - [75, 12])
          value: (binary_expression [75, 15] - [75, 81]
            left: (parenthesized_expression [75, 15] - [75, 58]
              (binary_expression [75, 16] - [75, 57]
                left: (identifier [75, 16] - [75, 34])
                right: (field_expression [75, 37] - [75, 57]
                  argument: (identifier [75, 37] - [75, 46])
                  field: (field_identifier [75, 47] - [75, 57]))))
            right: (field_expression [75, 61] - [75, 81]
              argument: (identifier [75, 61] - [75, 70])
              field: (field_identifier [75, 71] - [75, 81])))))
      (expression_statement [76, 1] - [76, 56]
        (assignment_expression [76, 1] - [76, 55]
          left: (field_expression [76, 1] - [76, 49]
            argument: (identifier [76, 1] - [76, 12])
            field: (field_identifier [76, 13] - [76, 49]))
          right: (identifier [76, 52] - [76, 55])))
      (expression_statement [77, 1] - [77, 126]
        (call_expression [77, 1] - [77, 125]
          function: (identifier [77, 1] - [77, 28])
          arguments: (argument_list [77, 28] - [77, 125]
            (binary_expression [77, 29] - [77, 57]
              left: (identifier [77, 29] - [77, 51])
              right: (identifier [77, 54] - [77, 57]))
            (identifier [77, 59] - [77, 77])
            (field_expression [77, 79] - [77, 100]
              argument: (identifier [77, 79] - [77, 88])
              field: (field_identifier [77, 89] - [77, 100]))
            (field_expression [77, 102] - [77, 124]
              argument: (identifier [77, 102] - [77, 111])
              field: (field_identifier [77, 112] - [77, 124])))))))
  (function_definition [80, 0] - [94, 1]
    type: (type_identifier [80, 0] - [80, 9])
    declarator: (function_declarator [80, 10] - [80, 121]
      declarator: (qualified_identifier [80, 10] - [80, 47]
        scope: (namespace_identifier [80, 10] - [80, 18])
        name: (identifier [80, 20] - [80, 47]))
      parameters: (parameter_list [80, 47] - [80, 121]
        (parameter_declaration [80, 48] - [80, 75]
          type: (primitive_type [80, 48] - [80, 55])
          declarator: (identifier [80, 56] - [80, 75]))
        (parameter_declaration [80, 77] - [80, 97]
          type: (primitive_type [80, 77] - [80, 85])
          declarator: (identifier [80, 86] - [80, 97]))
        (parameter_declaration [80, 99] - [80, 120]
          type: (primitive_type [80, 99] - [80, 107])
          declarator: (identifier [80, 108] - [80, 120]))))
    (comment [80, 121] - [80, 130])
    body: (compound_statement [81, 0] - [94, 1]
      (declaration [82, 1] - [82, 21]
        type: (type_identifier [82, 1] - [82, 10])
        declarator: (identifier [82, 11] - [82, 20]))
      (declaration [84, 1] - [84, 39]
        type: (primitive_type [84, 1] - [84, 4])
        declarator: (init_declarator [84, 5] - [84, 38]
          declarator: (identifier [84, 5] - [84, 11])
          value: (binary_expression [84, 14] - [84, 38]
            left: (number_literal [84, 14] - [84, 16])
            right: (identifier [84, 19] - [84, 38]))))
      (comment [84, 40] - [84, 47])
      (declaration [85, 1] - [85, 45]
        type: (primitive_type [85, 1] - [85, 7])
        declarator: (init_declarator [85, 8] - [85, 44]
          declarator: (identifier [85, 8] - [85, 17])
          value: (binary_expression [85, 20] - [85, 44]
            left: (cast_expression [85, 20] - [85, 39]
              type: (type_descriptor [85, 21] - [85, 27]
                type: (primitive_type [85, 21] - [85, 27]))
              value: (identifier [85, 28] - [85, 39]))
            right: (number_literal [85, 42] - [85, 44]))))
      (declaration [86, 1] - [86, 47]
        type: (primitive_type [86, 1] - [86, 7])
        declarator: (init_declarator [86, 8] - [86, 46]
          declarator: (identifier [86, 8] - [86, 18])
          value: (binary_expression [86, 21] - [86, 46]
            left: (cast_expression [86, 21] - [86, 41]
              type: (type_descriptor [86, 22] - [86, 28]
                type: (primitive_type [86, 22] - [86, 28]))
              value: (identifier [86, 29] - [86, 41]))
            right: (number_literal [86, 44] - [86, 46]))))
      (expression_statement [88, 1] - [88, 55]
        (assignment_expression [88, 1] - [88, 54]
          left: (field_expression [88, 1] - [88, 21]
            argument: (identifier [88, 1] - [88, 10])
            field: (field_identifier [88, 11] - [88, 21]))
          right: (cast_expression [88, 24] - [88, 54]
            type: (type_descriptor [88, 25] - [88, 33]
              type: (primitive_type [88, 25] - [88, 33]))
            value: (parenthesized_expression [88, 34] - [88, 54]
              (binary_expression [88, 35] - [88, 53]
                left: (identifier [88, 35] - [88, 44])
                right: (identifier [88, 47] - [88, 53]))))))
      (expression_statement [89, 1] - [89, 56]
        (assignment_expression [89, 1] - [89, 55]
          left: (field_expression [89, 1] - [89, 21]
            argument: (identifier [89, 1] - [89, 10])
            field: (field_identifier [89, 11] - [89, 21]))
          right: (cast_expression [89, 24] - [89, 55]
            type: (type_descriptor [89, 25] - [89, 33]
              type: (primitive_type [89, 25] - [89, 33]))
            value: (parenthesized_expression [89, 34] - [89, 55]
              (binary_expression [89, 35] - [89, 54]
                left: (identifier [89, 35] - [89, 45])
                right: (identifier [89, 48] - [89, 54]))))))
      (expression_statement [90, 1] - [90, 75]
        (assignment_expression [90, 1] - [90, 74]
          left: (field_expression [90, 1] - [90, 22]
            argument: (identifier [90, 1] - [90, 10])
            field: (field_identifier [90, 11] - [90, 22]))
          right: (cast_expression [90, 25] - [90, 74]
            type: (type_descriptor [90, 26] - [90, 34]
              type: (primitive_type [90, 26] - [90, 34]))
            value: (parenthesized_expression [90, 35] - [90, 74]
              (binary_expression [90, 36] - [90, 73]
                left: (parenthesized_expression [90, 36] - [90, 51]
                  (binary_expression [90, 37] - [90, 50]
                    left: (identifier [90, 37] - [90, 46])
                    right: (number_literal [90, 49] - [90, 50])))
                right: (identifier [90, 54] - [90, 73]))))))
      (expression_statement [91, 1] - [91, 77]
        (assignment_expression [91, 1] - [91, 76]
          left: (field_expression [91, 1] - [91, 23]
            argument: (identifier [91, 1] - [91, 10])
            field: (field_identifier [91, 11] - [91, 23]))
          right: (cast_expression [91, 26] - [91, 76]
            type: (type_descriptor [91, 27] - [91, 35]
              type: (primitive_type [91, 27] - [91, 35]))
            value: (parenthesized_expression [91, 36] - [91, 76]
              (binary_expression [91, 37] - [91, 75]
                left: (parenthesized_expression [91, 37] - [91, 53]
                  (binary_expression [91, 38] - [91, 52]
                    left: (identifier [91, 38] - [91, 48])
                    right: (number_literal [91, 51] - [91, 52])))
                right: (identifier [91, 56] - [91, 75]))))))
      (return_statement [93, 1] - [93, 18]
        (identifier [93, 8] - [93, 17]))))
  (function_definition [96, 0] - [123, 1]
    type: (primitive_type [96, 0] - [96, 4])
    declarator: (function_declarator [96, 5] - [96, 182]
      declarator: (qualified_identifier [96, 5] - [96, 42]
        scope: (namespace_identifier [96, 5] - [96, 13])
        name: (identifier [96, 15] - [96, 42]))
      parameters: (parameter_list [96, 42] - [96, 182]
        (parameter_declaration [96, 43] - [96, 64]
          type: (primitive_type [96, 43] - [96, 51])
          declarator: (identifier [96, 52] - [96, 64]))
        (parameter_declaration [96, 66] - [96, 87]
          type: (primitive_type [96, 66] - [96, 74])
          declarator: (identifier [96, 75] - [96, 87]))
        (parameter_declaration [96, 89] - [96, 111]
          type: (primitive_type [96, 89] - [96, 97])
          declarator: (identifier [96, 98] - [96, 111]))
        (parameter_declaration [96, 113] - [96, 136]
          type: (primitive_type [96, 113] - [96, 121])
          declarator: (identifier [96, 122] - [96, 136]))
        (parameter_declaration [96, 138] - [96, 158]
          type: (primitive_type [96, 138] - [96, 146])
          declarator: (identifier [96, 147] - [96, 158]))
        (parameter_declaration [96, 160] - [96, 181]
          type: (primitive_type [96, 160] - [96, 168])
          declarator: (identifier [96, 169] - [96, 181]))))
    body: (compound_statement [97, 0] - [123, 1]
      (expression_statement [98, 1] - [98, 34]
        (assignment_expression [98, 1] - [98, 33]
          left: (identifier [98, 1] - [98, 19])
          right: (identifier [98, 22] - [98, 33])))
      (expression_statement [99, 1] - [99, 95]
        (call_expression [99, 1] - [99, 94]
          function: (identifier [99, 1] - [99, 35])
          arguments: (argument_list [99, 35] - [99, 94]
            (identifier [99, 36] - [99, 48])
            (identifier [99, 50] - [99, 62])
            (identifier [99, 64] - [99, 77])
            (identifier [99, 79] - [99, 93]))))
      (if_statement [101, 1] - [104, 2]
        condition: (condition_clause [101, 4] - [101, 33]
          value: (binary_expression [101, 5] - [101, 32]
            left: (identifier [101, 5] - [101, 18])
            right: (identifier [101, 21] - [101, 32])))
        consequence: (compound_statement [102, 1] - [104, 2]
          (expression_statement [103, 2] - [103, 28]
            (assignment_expression [103, 2] - [103, 27]
              left: (identifier [103, 2] - [103, 13])
              right: (identifier [103, 16] - [103, 27])))))
      (if_statement [106, 1] - [109, 2]
        condition: (condition_clause [106, 4] - [106, 35]
          value: (binary_expression [106, 5] - [106, 34]
            left: (identifier [106, 5] - [106, 19])
            right: (identifier [106, 22] - [106, 34])))
        consequence: (compound_statement [107, 1] - [109, 2]
          (expression_statement [108, 2] - [108, 30]
            (assignment_expression [108, 2] - [108, 29]
              left: (identifier [108, 2] - [108, 14])
              right: (identifier [108, 17] - [108, 29])))))
      (if_statement [111, 1] - [114, 2]
        condition: (condition_clause [111, 4] - [111, 32]
          value: (binary_expression [111, 5] - [111, 31]
            left: (identifier [111, 5] - [111, 17])
            right: (identifier [111, 20] - [111, 31])))
        consequence: (compound_statement [112, 1] - [114, 2]
          (expression_statement [113, 2] - [113, 31]
            (assignment_expression [113, 2] - [113, 30]
              left: (identifier [113, 2] - [113, 12])
              right: (binary_expression [113, 15] - [113, 30]
                left: (identifier [113, 15] - [113, 26])
                right: (number_literal [113, 29] - [113, 30]))))))
      (if_statement [116, 1] - [119, 2]
        condition: (condition_clause [116, 4] - [116, 33]
          value: (binary_expression [116, 5] - [116, 32]
            left: (identifier [116, 5] - [116, 17])
            right: (identifier [116, 20] - [116, 32])))
        consequence: (compound_statement [117, 1] - [119, 2]
          (expression_statement [118, 2] - [118, 32]
            (assignment_expression [118, 2] - [118, 31]
              left: (identifier [118, 2] - [118, 12])
              right: (binary_expression [118, 15] - [118, 31]
                left: (identifier [118, 15] - [118, 27])
                right: (number_literal [118, 30] - [118, 31]))))))
      (declaration [121, 1] - [121, 83]
        type: (primitive_type [121, 1] - [121, 8])
        declarator: (init_declarator [121, 9] - [121, 82]
          declarator: (identifier [121, 9] - [121, 35])
          value: (binary_expression [121, 38] - [121, 82]
            left: (identifier [121, 38] - [121, 48])
            right: (binary_expression [121, 51] - [121, 82]
              left: (identifier [121, 51] - [121, 69])
              right: (identifier [121, 72] - [121, 82])))))
      (expression_statement [122, 1] - [122, 129]
        (call_expression [122, 1] - [122, 128]
          function: (identifier [122, 1] - [122, 28])
          arguments: (argument_list [122, 28] - [122, 128]
            (binary_expression [122, 29] - [122, 80]
              left: (identifier [122, 29] - [122, 55])
              right: (identifier [122, 58] - [122, 80]))
            (identifier [122, 82] - [122, 100])
            (identifier [122, 102] - [122, 113])
            (identifier [122, 115] - [122, 127]))))))
  (function_definition [125, 0] - [147, 1]
    type: (primitive_type [125, 0] - [125, 4])
    declarator: (function_declarator [125, 5] - [125, 144]
      declarator: (qualified_identifier [125, 5] - [125, 42]
        scope: (namespace_identifier [125, 5] - [125, 13])
        name: (identifier [125, 15] - [125, 42]))
      parameters: (parameter_list [125, 42] - [125, 144]
        (parameter_declaration [125, 43] - [125, 72]
          type: (primitive_type [125, 43] - [125, 50])
          declarator: (pointer_declarator [125, 50] - [125, 72]
            declarator: (identifier [125, 52] - [125, 72])))
        (parameter_declaration [125, 74] - [125, 94]
          type: (primitive_type [125, 74] - [125, 82])
          declarator: (identifier [125, 83] - [125, 94]))
        (parameter_declaration [125, 96] - [125, 118]
          type: (primitive_type [125, 96] - [125, 104])
          declarator: (identifier [125, 105] - [125, 118]))
        (parameter_declaration [125, 120] - [125, 143]
          type: (primitive_type [125, 120] - [125, 128])
          declarator: (identifier [125, 129] - [125, 143]))))
    body: (compound_statement [126, 0] - [147, 1]
      (if_statement [127, 1] - [130, 2]
        condition: (condition_clause [127, 4] - [127, 17]
          value: (identifier [127, 5] - [127, 16]))
        consequence: (compound_statement [128, 1] - [130, 2]
          (expression_statement [129, 2] - [129, 35]
            (assignment_expression [129, 2] - [129, 34]
              left: (identifier [129, 2] - [129, 20])
              right: (identifier [129, 23] - [129, 34])))))
      (if_statement [132, 1] - [136, 2]
        condition: (condition_clause [132, 4] - [132, 26]
          value: (identifier [132, 5] - [132, 25]))
        consequence: (compound_statement [133, 1] - [136, 2]
          (expression_statement [134, 2] - [134, 57]
            (assignment_expression [134, 2] - [134, 56]
              left: (identifier [134, 2] - [134, 33])
              right: (identifier [134, 36] - [134, 56])))
          (expression_statement [135, 2] - [135, 81]
            (assignment_expression [135, 2] - [135, 80]
              left: (identifier [135, 2] - [135, 36])
              right: (binary_expression [135, 39] - [135, 80]
                left: (identifier [135, 39] - [135, 59])
                right: (identifier [135, 62] - [135, 80]))))))
      (if_statement [138, 1] - [141, 2]
        condition: (condition_clause [138, 4] - [138, 19]
          value: (identifier [138, 5] - [138, 18]))
        consequence: (compound_statement [139, 1] - [141, 2]
          (expression_statement [140, 2] - [140, 30]
            (assignment_expression [140, 2] - [140, 29]
              left: (identifier [140, 2] - [140, 13])
              right: (identifier [140, 16] - [140, 29])))))
      (if_statement [143, 1] - [146, 2]
        condition: (condition_clause [143, 4] - [143, 20]
          value: (identifier [143, 5] - [143, 19]))
        consequence: (compound_statement [144, 1] - [146, 2]
          (expression_statement [145, 2] - [145, 32]
            (assignment_expression [145, 2] - [145, 31]
              left: (identifier [145, 2] - [145, 14])
              right: (identifier [145, 17] - [145, 31])))))))
  (comment [149, 0] - [149, 76])
  (function_definition [150, 0] - [158, 1]
    type: (primitive_type [150, 0] - [150, 4])
    declarator: (function_declarator [150, 5] - [150, 136]
      declarator: (qualified_identifier [150, 5] - [150, 49]
        scope: (namespace_identifier [150, 5] - [150, 13])
        name: (identifier [150, 15] - [150, 49]))
      parameters: (parameter_list [150, 49] - [150, 136]
        (parameter_declaration [150, 50] - [150, 67]
          type: (primitive_type [150, 50] - [150, 57])
          declarator: (identifier [150, 58] - [150, 67]))
        (parameter_declaration [150, 69] - [150, 86]
          type: (primitive_type [150, 69] - [150, 76])
          declarator: (identifier [150, 77] - [150, 86]))
        (parameter_declaration [150, 88] - [150, 110]
          type: (primitive_type [150, 88] - [150, 96])
          declarator: (identifier [150, 97] - [150, 110]))
        (parameter_declaration [150, 112] - [150, 135]
          type: (primitive_type [150, 112] - [150, 120])
          declarator: (identifier [150, 121] - [150, 135]))))
    (comment [150, 136] - [150, 145])
    body: (compound_statement [151, 0] - [158, 1]
      (expression_statement [152, 1] - [152, 30]
        (assignment_expression [152, 1] - [152, 29]
          left: (identifier [152, 1] - [152, 15])
          right: (identifier [152, 18] - [152, 29])))
      (expression_statement [153, 1] - [153, 32]
        (assignment_expression [153, 1] - [153, 31]
          left: (identifier [153, 1] - [153, 16])
          right: (identifier [153, 19] - [153, 31])))
      (expression_statement [154, 1] - [154, 24]
        (assignment_expression [154, 1] - [154, 23]
          left: (identifier [154, 1] - [154, 11])
          right: (identifier [154, 14] - [154, 23])))
      (expression_statement [155, 1] - [155, 24]
        (assignment_expression [155, 1] - [155, 23]
          left: (identifier [155, 1] - [155, 11])
          right: (identifier [155, 14] - [155, 23])))
      (expression_statement [156, 1] - [156, 29]
        (assignment_expression [156, 1] - [156, 28]
          left: (identifier [156, 1] - [156, 12])
          right: (identifier [156, 15] - [156, 28])))
      (expression_statement [157, 1] - [157, 31]
        (assignment_expression [157, 1] - [157, 30]
          left: (identifier [157, 1] - [157, 13])
          right: (identifier [157, 16] - [157, 30])))))
  (comment [160, 0] - [160, 76])
  (function_definition [161, 0] - [171, 1]
    type: (primitive_type [161, 0] - [161, 4])
    declarator: (function_declarator [161, 5] - [161, 64]
      declarator: (qualified_identifier [161, 5] - [161, 35]
        scope: (namespace_identifier [161, 5] - [161, 13])
        name: (identifier [161, 15] - [161, 35]))
      parameters: (parameter_list [161, 35] - [161, 64]
        (parameter_declaration [161, 36] - [161, 63]
          type: (primitive_type [161, 36] - [161, 43])
          declarator: (identifier [161, 44] - [161, 63]))))
    (comment [161, 64] - [161, 73])
    body: (compound_statement [162, 0] - [171, 1]
      (declaration [163, 1] - [163, 39]
        type: (primitive_type [163, 1] - [163, 4])
        declarator: (init_declarator [163, 5] - [163, 38]
          declarator: (identifier [163, 5] - [163, 11])
          value: (binary_expression [163, 14] - [163, 38]
            left: (number_literal [163, 14] - [163, 16])
            right: (identifier [163, 19] - [163, 38]))))
      (comment [163, 40] - [163, 47])
      (declaration [164, 1] - [164, 52]
        type: (primitive_type [164, 1] - [164, 7])
        declarator: (init_declarator [164, 8] - [164, 51]
          declarator: (identifier [164, 8] - [164, 17])
          value: (binary_expression [164, 20] - [164, 51]
            left: (cast_expression [164, 20] - [164, 46]
              type: (type_descriptor [164, 21] - [164, 27]
                type: (primitive_type [164, 21] - [164, 27]))
              value: (identifier [164, 28] - [164, 46]))
            right: (number_literal [164, 49] - [164, 51]))))
      (declaration [165, 1] - [165, 54]
        type: (primitive_type [165, 1] - [165, 7])
        declarator: (init_declarator [165, 8] - [165, 53]
          declarator: (identifier [165, 8] - [165, 18])
          value: (binary_expression [165, 21] - [165, 53]
            left: (cast_expression [165, 21] - [165, 48]
              type: (type_descriptor [165, 22] - [165, 28]
                type: (primitive_type [165, 22] - [165, 28]))
              value: (identifier [165, 29] - [165, 48]))
            right: (number_literal [165, 51] - [165, 53]))))
      (expression_statement [167, 1] - [167, 45]
        (assignment_expression [167, 1] - [167, 44]
          left: (identifier [167, 1] - [167, 11])
          right: (cast_expression [167, 14] - [167, 44]
            type: (type_descriptor [167, 15] - [167, 23]
              type: (primitive_type [167, 15] - [167, 23]))
            value: (parenthesized_expression [167, 24] - [167, 44]
              (binary_expression [167, 25] - [167, 43]
                left: (identifier [167, 25] - [167, 34])
                right: (identifier [167, 37] - [167, 43]))))))
      (expression_statement [168, 1] - [168, 46]
        (assignment_expression [168, 1] - [168, 45]
          left: (identifier [168, 1] - [168, 11])
          right: (cast_expression [168, 14] - [168, 45]
            type: (type_descriptor [168, 15] - [168, 23]
              type: (primitive_type [168, 15] - [168, 23]))
            value: (parenthesized_expression [168, 24] - [168, 45]
              (binary_expression [168, 25] - [168, 44]
                left: (identifier [168, 25] - [168, 35])
                right: (identifier [168, 38] - [168, 44]))))))
      (expression_statement [169, 1] - [169, 68]
        (assignment_expression [169, 1] - [169, 67]
          left: (identifier [169, 1] - [169, 15])
          right: (cast_expression [169, 18] - [169, 67]
            type: (type_descriptor [169, 19] - [169, 27]
              type: (primitive_type [169, 19] - [169, 27]))
            value: (parenthesized_expression [169, 28] - [169, 67]
              (binary_expression [169, 29] - [169, 66]
                left: (parenthesized_expression [169, 29] - [169, 44]
                  (binary_expression [169, 30] - [169, 43]
                    left: (identifier [169, 30] - [169, 39])
                    right: (number_literal [169, 42] - [169, 43])))
                right: (identifier [169, 47] - [169, 66]))))))
      (expression_statement [170, 1] - [170, 70]
        (assignment_expression [170, 1] - [170, 69]
          left: (identifier [170, 1] - [170, 16])
          right: (cast_expression [170, 19] - [170, 69]
            type: (type_descriptor [170, 20] - [170, 28]
              type: (primitive_type [170, 20] - [170, 28]))
            value: (parenthesized_expression [170, 29] - [170, 69]
              (binary_expression [170, 30] - [170, 68]
                left: (parenthesized_expression [170, 30] - [170, 46]
                  (binary_expression [170, 31] - [170, 45]
                    left: (identifier [170, 31] - [170, 41])
                    right: (number_literal [170, 44] - [170, 45])))
                right: (identifier [170, 49] - [170, 68])))))))))
